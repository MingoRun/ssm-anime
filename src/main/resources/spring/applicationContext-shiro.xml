<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd">
 
    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <!-- 安全管理器 
    	1、缓存技术:缓存管理
    	2、realm:获取并处理数据
    -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="authenticator" ref="authenticator"/>
        <!-- 自定义realm -->
        <property name="realms">
        	<list>
        		<!--<ref bean="adminRealm"/> 	-->
        		<ref bean="userRealm"/>
        	</list>
        </property>
        <!-- <property name="realm" ref="adminRealm"/> -->
    </bean>
 
 	<!-- 配置使用自定义认证器，可以实现多Realm认证，并且可以指定特定Realm处理特定类型的验证 -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator"> 
        <property name="authenticationStrategy">
        	<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy" />
            <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
            <!-- <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean> -->
        </property>
    </bean>
 
 	<!-- 配置Realm -->
 	<!--<bean id="adminRealm" class="cn.edu.hstc.core.realm.AdminRealm">
 		&lt;!&ndash; 配置密码匹配器 &ndash;&gt;
 		<property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
            	&lt;!&ndash;加密算法的名称MD5&ndash;&gt;
                <property name="hashAlgorithmName" value="MD5"></property>
                &lt;!&ndash;配置加密的次数 &ndash;&gt;
                <property name="hashIterations" value="1024"></property> 
            </bean>
        </property>
 	</bean>-->
 	
 	 <bean id="userRealm" class="cn.edu.hstc.core.realm.UserRealm">
 		<!--配置密码匹配器-->
 		<property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
            	<!--加密算法的名称MD5-->
                <property name="hashAlgorithmName" value="MD5"></property>
                <!--配置加密的次数 -->
                <property name="hashIterations" value="1024"></property> 
            </bean>
        </property>
 	</bean>
 	<!-- 配置授权管理器   -->
 	<!-- <bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
 		<property name="realm" ref="jdbcRealm" />
 	</bean> -->
  <!--   <bean id="jdbcRealm" class="com.shiro.realm.ShiroRealm">
    	<property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property> 加密算法的名称
                <property name="hashIterations" value="1024"></property> 配置加密的次数
            </bean>
        </property>
    </bean> -->
    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!-- 缓存管理器 
                     目前我们使用的缓存技术是EhCache缓存框架
    -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default mapper:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> 
    </bean>
 
    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
 
    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!-- 必须要有这样的一个bean，用来管理shiro的生命周期 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
 
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!-- 启动Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
 
    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <!-- 网络方面 -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
 	
    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!-- 
    	Shiro过滤器
    	1、shiroFilter这个bean的id必须要和web.xml中的filter-name同名
     -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/jsp/bgsystem/login.jsp"/>
        <!-- <property name="successUrl" value="/jsp/bgsystem/admin/index.jsp"/> -->
        <!-- <property name="unauthorizedUrl" value="/jsp/bgsystem/login.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="userAuthc" value-ref="userAuthc"/>
            </util:map>
        </property> -->
        <!-- Shiro filter的具体配置 -->
        <property name="filterChainDefinitions">
            <value>
                <!-- anon代表未经认证就可以访问的Web资源 -->
                <!-- 匿名访问静态资源 -->
                /resources/css/** = anon
                /resources/fonts/** = anon
                /resources/images/** = anon
                /resources/js/** = anon
                /resources/layui/** = anon
                /Kaptcha = anon
                <!-- 匿名访问  -->
                /jsp/bgsystem/login.jsp = anon
                /login.action = anon
                /logout.action = logout
                <!-- 当用户是系统管理员的时候才有权访问 -->
                /jsp/bgsystem/admin/** = authc
                <!-- authc必须经过认证才可以访问的Web资源 -->
               <!--  /** = authc -->
            </value>
        </property>
        <!-- 自定义filter配置 -->
    </bean>
 	<!-- 自定义filter -->
</beans>